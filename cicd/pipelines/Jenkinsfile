pipeline {
    parameters {
        string(name: 'ENVIRONMENT',        defaultValue: 'dev',                    description: 'Kubernetes namespace')
        string(name: 'BRANCH',             defaultValue: 'develop',                description: 'Kubernetes namespace')
        string(name: 'VERSION',            defaultValue: 'latest',                 description: 'App version')
        string(name: 'REGISTRY',           defaultValue: '',                       description: 'Docker registry')
    }
    environment {
        REGISTRY_CREDENTIAL = 'dockerhub-token'
    }
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    type: jenkins-runner
spec:
  containers:
    - name: docker
      image: docker:19.03
      command:
        - cat
      tty: true
      privileged: true
      volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
    - name: helm
      image: lachlanevenson/k8s-helm:v3.1.1
      command:
        - cat
      tty: true
  volumes:
    - name: dockersock
      hostPath:
        path: /var/run/docker.sock
"""
        }
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm: [$class: 'GitSCM', branches: [[name: '${BRANCH}']], userRemoteConfigs: [[url: 'https://github.com:mehyedes/nodejs-k8s.git']]]
            }
        }
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh "docker build -t ${REGISTRY}:${VERSION} ."
                }
            }
        }
        stage('Publish Docker Image') {
            steps {
                container('docker') {
                    withDockerRegistry([credentialsId: "${REGISTRY_CREDENTIAL}", url: ""]) {
                        sh "docker push ${REGISTRY}:${VERSION}"
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                container('helm') {
                    sh "helm upgrade --install --set image.tag=${VERSION} nodejs-k8s ./chart/nodejs-k8s/ -f values/${ENVIRONMENT}.yaml"
                }
            }
        }
    }
}
